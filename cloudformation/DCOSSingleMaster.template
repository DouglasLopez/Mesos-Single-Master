{"AWSTemplateFormatVersion":"2010-09-09",
  "Description":"DC/OS AWS CloudFormation Template",
  "Parameters":{
    "KeyName":{
      "Description":"Required: Specify your AWS EC2 Key Pair.",
      "Type":"AWS::EC2::KeyPair::KeyName"
    },
    "OAuthEnabled":{
      "Description":"\nEnable OAuth authentication",
      "AllowedValues":[
        "true",
        "false"
      ],
      "Default":"true",
      "Type":"String"
    },
    "SlaveInstanceCount":{
      "Description":"Required: Specify the number of private agent nodes or accept the default.",
      "Default":"5",
      "Type":"Number"
    },
    "SubnetID": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "List of an existing subnet IDs to use for the load balancer and auto scaling group"
    },
    "SecurityGroups": {
      "Description": "Comma separated list of security groups",
      "Type": "CommaDelimitedList"
    },
    "Environment" : {
      "Description" : "Environment to be deployed",
      "Type"        : "String",
      "Default"     : "Staging",
      "AllowedValues" : [ "Production", "Staging", "Testing" ]
    },
    "Project" : {
      "Description" : "Project to be deployed",
      "Type"        : "String"
    },
    "Owner" : {
      "Description" : "Environment to be deployed",
      "Type"        : "String"
    },
   
    "DomainZone" : {
      "Description": "Environment to be deployed",
      "Type": "String"
    }


  },

  "Mappings":{
    "RegionToAmi":{
      "sa-east-1":{
        "stable":"ami-154af179"
      },
      "eu-west-1":{
        "stable":"ami-55d20b26"
      },
      "us-east-1":{
        "stable":"ami-37bdc15d"
      },
      "ap-northeast-1":{
        "stable":"ami-84e0c7ea"
      },
      "eu-central-1":{
        "stable":"ami-fdd4c791"
      },
      "us-west-2":{
        "stable":"ami-00ebfc61"
      },
      "ap-southeast-2":{
        "stable":"ami-f35b0590"
      },
      "ap-southeast-1":{
        "stable":"ami-da67a0b9"
      },
      "us-gov-west-1":{
        "stable":"ami-05bc0164"
      },
      "us-west-1":{
        "stable":"ami-27553a47"
      }
    },
    "Parameters":{
      "StackCreationTimeout":{
        "default":"PT45M"
      },
      "MasterInstanceType":{
        "default":"m3.xlarge"
      },
      "SlaveInstanceType": {
        "default": "m3.xlarge"
      }

    }
  },
  "Resources":{
    "ExhibitorS3Bucket":{
      "DeletionPolicy":"Retain",
      "Type":"AWS::S3::Bucket"
    },
    "MasterRole":{
      "Properties":{
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"root",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Resource":[
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref":"ExhibitorS3Bucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join":[
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref":"ExhibitorS3Bucket"
                          }
                        ]
                      ]
                    }
                  ],
                  "Action":[
                    "s3:AbortMultipartUpload",
                    "s3:DeleteObject",
                    "s3:GetBucketAcl",
                    "s3:GetBucketPolicy",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ]
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "cloudformation:*"
                  ],
                  "Resource":[
                    {
                      "Ref":"AWS::StackId"
                    },
                    {
                      "Fn::Join":[
                        "",
                        [
                          {
                            "Ref":"AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeSubnets",
                    "autoscaling:DescribeLaunchConfigurations",
                    "autoscaling:UpdateAutoScalingGroup",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeScalingActivities",
                    "elasticloadbalancing:DescribeLoadBalancers"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Action":[
                "sts:AssumeRole"
              ],
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        }
      },
      "Type":"AWS::IAM::Role"
    },
    "SlaveRole":{
      "Properties":{
        "Policies":[
          {
            "PolicyName":"Slaves",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "cloudformation:*"
                  ],
                  "Resource":[
                    {
                      "Ref":"AWS::StackId"
                    },
                    {
                      "Fn::Join":[
                        "",
                        [
                          {
                            "Ref":"AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "ec2:CreateTags",
                    "ec2:DescribeInstances",
                    "ec2:CreateVolume",
                    "ec2:DeleteVolume",
                    "ec2:AttachVolume",
                    "ec2:DetachVolume",
                    "ec2:DescribeVolumes",
                    "ec2:DescribeVolumeStatus",
                    "ec2:DescribeVolumeAttribute",
                    "ec2:CreateSnapshot",
                    "ec2:CopySnapshot",
                    "ec2:DeleteSnapshot",
                    "ec2:DescribeSnapshots",
                    "ec2:DescribeSnapshotAttribute"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Action":[
                "sts:AssumeRole"
              ],
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        }
      },
      "Type":"AWS::IAM::Role"
    },
    "MasterInstanceProfile":{
      "Properties":{
        "Roles":[
          {
            "Ref":"MasterRole"
          }
        ],
        "Path":"/"
      },
      "Type":"AWS::IAM::InstanceProfile"
    },
    "SlaveInstanceProfile":{
      "Properties":{
        "Roles":[
          {
            "Ref":"SlaveRole"
          }
        ],
        "Path":"/"
      },
      "Type":"AWS::IAM::InstanceProfile"
    },
    "MasterLaunchConfig":{
      "Properties":{
        "AssociatePublicIpAddress":"true",
        "ImageId":{
          "Fn::FindInMap":[
            "RegionToAmi",
            {
              "Ref":"AWS::Region"
            },
            "stable"
          ]
        },
        "IamInstanceProfile":{
          "Ref":"MasterInstanceProfile"
        },
        "KeyName":{
          "Ref":"KeyName"
        },
        "BlockDeviceMappings":[
          {
            "DeviceName":"/dev/sdb",
            "VirtualName":"ephemeral0"
          }
        ],
        "InstanceType":{
          "Fn::FindInMap":[
            "Parameters",
            "MasterInstanceType",
            "default"
          ]
        },
        "SecurityGroups":
        {
          "Ref":"SecurityGroups"
        }
      ,
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#cloud-config\n",
                "\"coreos\":\n",
                "  \"units\":\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                "      Before=var-lib.mount dbus.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      RemainAfterExit=yes\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                "    \"name\": |-\n",
                "      format-var-lib-ephemeral.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Mount /var/lib\n",
                "      Before=dbus.service\n",
                "      [Mount]\n",
                "      What=/dev/xvdb\n",
                "      Where=/var/lib\n",
                "      Type=ext4\n",
                "    \"name\": |-\n",
                "      var-lib.mount\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      etcd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      update-engine.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      locksmithd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"name\": |-\n",
                "      systemd-resolved.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      systemd-journald.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      docker.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Before=dcos.target\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                "    \"name\": |-\n",
                "      dcos-link-env.service\n",
                "  - \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Download DC/OS to this host.\n",
                "      After=network-online.target\n",
                "      Wants=network-online.target\n",
                "      ConditionPathExists=!/opt/mesosphere/\n",
                "      [Service]\n",
                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                "    \"name\": |-\n",
                "      dcos-download.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
                "      Requires=dcos-download.service\n",
                "      After=dcos-download.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                "      [Install]\n",
                "      WantedBy=multi-user.target\n",
                "    \"enable\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      dcos-setup.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |-\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Signal CloudFormation Success\n",
                "      After=dcos.target\n",
                "      Requires=dcos.target\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                "      [Service]\n",
                "      Type=simple\n",
                "      Restart=on-failure\n",
                "      StartLimitInterval=0\n",
                "      RestartSec=15s\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\"\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                "    \"name\": |-\n",
                "      dcos-cfn-signal.service\n",
                "  \"update\":\n",
                "    \"reboot-strategy\": |-\n",
                "      off\n",
                "\"write_files\":\n",
                "- \"content\": |\n",
                "    https://downloads.dcos.io/dcos/EarlyAccess\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/repository-url\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    BOOTSTRAP_ID=3a2b7e03c45cd615da8dfb1b103943894652cd71\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/bootstrap-id\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [\"dcos-config--setup_537afa008db7ba8f99ce73f9c0ef425fa61d3454\", \"dcos-metadata--setup_537afa008db7ba8f99ce73f9c0ef425fa61d3454\"]\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [Journal]\n",
                "    MaxLevelConsole=warning\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    MESOS_CLUSTER=",
                {
                  "Ref":"AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                "- \"content\": |\n",
                "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
                {
                  "Ref":"OAuthEnabled"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
                "- \"content\": |\n",
                "    MASTER_SOURCE=exhibitor\n",
                "    EXHIBITOR_ADDRESS=",
                {
                  "Fn::GetAtt":[
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    RESOLVERS=169.254.169.253\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                "- \"content\": |\n",
                "    EXHIBITOR_BACKEND=AWS_S3\n",
                "    AWS_REGION=",
                {
                  "Ref":"AWS::Region"
                },
                "",
                "\n",
                "    AWS_S3_BUCKET=",
                {
                  "Ref":"ExhibitorS3Bucket"
                },
                "",
                "\n",
                "    AWS_S3_PREFIX=",
                {
                  "Ref":"AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                "- \"content\": |\n",
                "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
                "    \"authentication\":{\"enabled\":false},\n",
                "\n",
                "    \"oauth\":{\"enabled\":",
                {
                  "Ref":"OAuthEnabled"
                },
                ",\"authHost\":\"https://dcos.auth0.com\"},",
                "\n",
                "\n",
                "    \"networking\":{\"enabled\":false},\"organization\":{\"enabled\":false},\"tracking\":{\"enabled\":true}}}}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
                "- \"content\": |\n",
                "    AWS_REGION=",
                {
                  "Ref":"AWS::Region"
                },
                "",
                "\n",
                "    AWS_STACK_ID=",
                {
                  "Ref":"AWS::StackId"
                },
                "",
                "\n",
                "    AWS_STACK_NAME=",
                {
                  "Ref":"AWS::StackName"
                },
                "",
                "\n",
                "    AWS_IAM_MASTER_ROLE_NAME=",
                {
                  "Ref":"MasterRole"
                },
                "",
                "\n",
                "    AWS_IAM_SLAVE_ROLE_NAME=",
                {
                  "Ref":"SlaveRole"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                "- \"content\": |-\n",
                "    {}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/master\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws_master\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        }
      },
      "Type":"AWS::AutoScaling::LaunchConfiguration"
    },
    "SlaveLaunchConfig":{
      "Properties":{
        "AssociatePublicIpAddress":"false",
        "ImageId":{
          "Fn::FindInMap":[
            "RegionToAmi",
            {
              "Ref":"AWS::Region"
            },
            "stable"
          ]
        },
        "IamInstanceProfile":{
          "Ref":"SlaveInstanceProfile"
        },
        "KeyName":{
          "Ref":"KeyName"
        },
        "BlockDeviceMappings":[
          {
            "DeviceName":"/dev/sdb",
            "VirtualName":"ephemeral0"
          }
        ],
        "InstanceType":{
          "Fn::FindInMap":[
            "Parameters",
            "SlaveInstanceType",
            "default"
          ]
        },
        "SecurityGroups":
        {
          "Ref":"SecurityGroups"
        }
      ,
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#cloud-config\n",
                "\"coreos\":\n",
                "  \"units\":\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                "      Before=var-lib.mount dbus.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      RemainAfterExit=yes\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                "    \"name\": |-\n",
                "      format-var-lib-ephemeral.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Mount /var/lib\n",
                "      Before=dbus.service\n",
                "      [Mount]\n",
                "      What=/dev/xvdb\n",
                "      Where=/var/lib\n",
                "      Type=ext4\n",
                "    \"name\": |-\n",
                "      var-lib.mount\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      etcd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      update-engine.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      locksmithd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"name\": |-\n",
                "      systemd-resolved.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      systemd-journald.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      docker.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Before=dcos.target\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                "    \"name\": |-\n",
                "      dcos-link-env.service\n",
                "  - \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Download DC/OS to this host.\n",
                "      After=network-online.target\n",
                "      Wants=network-online.target\n",
                "      ConditionPathExists=!/opt/mesosphere/\n",
                "      [Service]\n",
                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                "    \"name\": |-\n",
                "      dcos-download.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
                "      Requires=dcos-download.service\n",
                "      After=dcos-download.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                "      [Install]\n",
                "      WantedBy=multi-user.target\n",
                "    \"enable\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      dcos-setup.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |-\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Signal CloudFormation Success\n",
                "      After=dcos.target\n",
                "      Requires=dcos.target\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                "      [Service]\n",
                "      Type=simple\n",
                "      Restart=on-failure\n",
                "      StartLimitInterval=0\n",
                "      RestartSec=15s\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\"\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                "    \"name\": |-\n",
                "      dcos-cfn-signal.service\n",
                "  \"update\":\n",
                "    \"reboot-strategy\": |-\n",
                "      off\n",
                "\"write_files\":\n",
                "- \"content\": |\n",
                "    https://downloads.dcos.io/dcos/EarlyAccess\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/repository-url\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    BOOTSTRAP_ID=3a2b7e03c45cd615da8dfb1b103943894652cd71\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/bootstrap-id\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [\"dcos-config--setup_537afa008db7ba8f99ce73f9c0ef425fa61d3454\", \"dcos-metadata--setup_537afa008db7ba8f99ce73f9c0ef425fa61d3454\"]\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [Journal]\n",
                "    MaxLevelConsole=warning\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    MESOS_CLUSTER=",
                {
                  "Ref":"AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                "- \"content\": |\n",
                "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
                {
                  "Ref":"OAuthEnabled"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
                "- \"content\": |\n",
                "    MASTER_SOURCE=exhibitor\n",
                "    EXHIBITOR_ADDRESS=",
                {
                  "Fn::GetAtt":[
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    RESOLVERS=169.254.169.253\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                "- \"content\": |\n",
                "    EXHIBITOR_BACKEND=AWS_S3\n",
                "    AWS_REGION=",
                {
                  "Ref":"AWS::Region"
                },
                "",
                "\n",
                "    AWS_S3_BUCKET=",
                {
                  "Ref":"ExhibitorS3Bucket"
                },
                "",
                "\n",
                "    AWS_S3_PREFIX=",
                {
                  "Ref":"AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                "- \"content\": |\n",
                "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
                "    \"authentication\":{\"enabled\":false},\n",
                "\n",
                "    \"oauth\":{\"enabled\":",
                {
                  "Ref":"OAuthEnabled"
                },
                ",\"authHost\":\"https://dcos.auth0.com\"},",
                "\n",
                "\n",
                "    \"networking\":{\"enabled\":false},\"organization\":{\"enabled\":false},\"tracking\":{\"enabled\":true}}}}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
                "- \"content\": |\n",
                "    AWS_REGION=",
                {
                  "Ref":"AWS::Region"
                },
                "",
                "\n",
                "    AWS_STACK_ID=",
                {
                  "Ref":"AWS::StackId"
                },
                "",
                "\n",
                "    AWS_STACK_NAME=",
                {
                  "Ref":"AWS::StackName"
                },
                "",
                "\n",
                "    AWS_IAM_MASTER_ROLE_NAME=",
                {
                  "Ref":"MasterRole"
                },
                "",
                "\n",
                "    AWS_IAM_SLAVE_ROLE_NAME=",
                {
                  "Ref":"SlaveRole"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                "- \"content\": |-\n",
                "    {}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/slave\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        }
      },
      "Type":"AWS::AutoScaling::LaunchConfiguration"
    },
    "InternalMasterLoadBalancer":{
      "Properties":{
        "Subnets":
        {
          "Ref":"SubnetID"
        },

        "Listeners":[
          {
            "InstanceProtocol":"HTTP",
            "LoadBalancerPort":"5050",
            "InstancePort":"5050",
            "Protocol":"HTTP"
          },
          {
            "InstanceProtocol":"TCP",
            "LoadBalancerPort":"2181",
            "InstancePort":"2181",
            "Protocol":"TCP"
          },
          {
            "InstanceProtocol":"HTTP",
            "LoadBalancerPort":"8181",
            "InstancePort":"8181",
            "Protocol":"HTTP"
          },
          {
            "InstanceProtocol":"HTTP",
            "LoadBalancerPort":"80",
            "InstancePort":"80",
            "Protocol":"HTTP"
          },
          {
            "InstanceProtocol":"TCP",
            "LoadBalancerPort":"443",
            "InstancePort":"443",
            "Protocol":"TCP"
          },
          {
            "InstanceProtocol":"HTTP",
            "LoadBalancerPort":"8080",
            "InstancePort":"8080",
            "Protocol":"HTTP"
          }
        ],
        "Scheme":"internal",
        "SecurityGroups": {
          "Ref": "SecurityGroups"
        },
        "HealthCheck":{
          "Timeout":"5",
          "Target":"HTTP:5050/health",
          "HealthyThreshold":"2",
          "UnhealthyThreshold":"2",
          "Interval":"30"
        },
        "Tags":[
          {
            "Value":"ELB",
            "Key":"Role"
          },
          {
            "Value":{ "Fn::Join" : [ "", [ { "Ref" : "Project" },"-", { "Ref" : "Environment" },"ELB" ] ] },
            "Key":"Name"

          },
          {
            "Value":{"Ref":"Project"},
            "Key":"Project"
          },
          {
            "Value":{"Ref":"Environment"},
            "Key":"Environment"
          },
          {
            "Value":{"Ref":"Owner"},
            "Key":"Owner"
          }

        ]
      },
      "Type":"AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "SlaveServerGroup":{
      "CreationPolicy":{
        "ResourceSignal":{
          "Timeout":{
            "Fn::FindInMap":[
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          },
          "Count":{
            "Ref":"SlaveInstanceCount"
          }
        }
      },
      "Properties":{
        "LaunchConfigurationName":{
          "Ref":"SlaveLaunchConfig"
        },
        "VPCZoneIdentifier": {
          "Ref": "SubnetID"
        },
        "DesiredCapacity":{
          "Ref":"SlaveInstanceCount"
        },
        "MinSize":{
          "Ref":"SlaveInstanceCount"
        },
        "MaxSize":{
          "Ref":"SlaveInstanceCount"
        },
        "Tags":[
          {
            "Value":"mesos-slave",
            "Key":"role",
            "PropagateAtLaunch":"true"
          },
          {
            "Value":{ "Fn::Join" : [ "", [ { "Ref" : "Project" },"-", { "Ref" : "Environment" },"-Mesos-Slave" ] ] },
            "Key":"Name",
            "PropagateAtLaunch":"true"
          },
          {
            "Value":{"Ref":"Project"},
            "Key":"Project",
            "PropagateAtLaunch":"true"
          },
          {
            "Value":{"Ref":"Environment"},
            "Key":"Environment",
            "PropagateAtLaunch":"true"
          },
          {
            "Value":{"Ref":"Owner"},
            "Key":"Owner",
            "PropagateAtLaunch":"true"
          }
        ]
      },

      "Type":"AWS::AutoScaling::AutoScalingGroup"
    },
    "MasterServerGroup":{
      "CreationPolicy":{
        "ResourceSignal":{
          "Timeout":{
            "Fn::FindInMap":[
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          },
          "Count":1
        }
      },
      "Properties":{
        "LaunchConfigurationName":{
          "Ref":"MasterLaunchConfig"
        },
        "VPCZoneIdentifier": {
          "Ref": "SubnetID"
        },
        "DesiredCapacity":1,
        "MinSize":1,
        "MaxSize":1,
        "LoadBalancerNames":[
          {
            "Ref":"InternalMasterLoadBalancer"
          }
        ],
        "Tags":[
          {
            "Value":"mesos-master",
            "Key":"role",
            "PropagateAtLaunch":"true"
          },
          {
            "Value":{ "Fn::Join" : [ "", [ { "Ref" : "Project" },"-", { "Ref" : "Environment" },"-Mesos-Master" ] ] },
            "Key":"Name",
            "PropagateAtLaunch":"true"
          },
          {
            "Value":{"Ref":"Project"},
            "Key":"Project",
            "PropagateAtLaunch":"true"
          },
          {
            "Value":{"Ref":"Environment"},
            "Key":"Environment",
            "PropagateAtLaunch":"true"
          },
          {
            "Value":{"Ref":"Owner"},
            "Key":"Owner",
            "PropagateAtLaunch":"true"
          }

        ]
      },

      "Type":"AWS::AutoScaling::AutoScalingGroup"
    },
    "MasterELBDNS" : {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": {"Ref" : "DomainZone"},
        "RecordSets": [
          {
            "Name": { "Fn::Join" : [ "", [ { "Ref" : "Project" },"-", { "Ref" : "Environment" },".",{"Ref" : "DomainZone"} ] ] },
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "InternalMasterLoadBalancer",
                  "CanonicalHostedZoneNameID"
                ]
              },
              "DNSName": {
                "Fn::GetAtt": [
                  "InternalMasterLoadBalancer",
                  "DNSName"
                ]
              }
            }
          }
        ]
      }
    }

  }
}